{"dependencies":[{"name":"./data/zbar","loc":{"line":1,"column":27}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _zbar = require(\"./data/zbar\");\n\nvar ApiModule = _interopRequireWildcard(_zbar);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nconst utf8BufferToString = (buffer, addr) => {\n  let end = addr;\n  while (buffer[end]) {\n    ++end;\n  }\n  const str = new Uint8Array(buffer.slice(addr, end));\n  const encodedString = String.fromCharCode.apply(null, str);\n  const decodedString = decodeURIComponent(escape(encodedString));\n  return decodedString;\n};\n\nconst Scanner = mixin => {\n  const mod = ApiModule(mixin);\n  const api = {\n    createBuffer: mod.cwrap('createBuffer', 'number', ['number']),\n    deleteBuffer: mod.cwrap('deleteBuffer', '', ['number']),\n    scanQrcode: mod.cwrap('scanQrcode', 'number', ['number', 'number', 'number']),\n    getScanResults: mod.cwrap('getScanResults', 'number', [])\n  };\n  const scanner = {\n    scanQrcode: (imgData, width, height) => {\n      const buf = api.createBuffer(width * height * 4);\n      mod.HEAP8.set(imgData, buf);\n      const results = [];\n      if (api.scanQrcode(buf, width, height)) {\n        const res_addr = api.getScanResults();\n        results.push(utf8BufferToString(mod.HEAP8, res_addr));\n        api.deleteBuffer(res_addr);\n      }\n      return results;\n    }\n  };\n  return new Promise((resolv, reject) => {\n    mod.then(() => {\n      resolv(scanner);\n    });\n  });\n};\n\nexports.default = Scanner;"},"hash":"6963ccf4d59d858b8b63646df1c93c1e"}